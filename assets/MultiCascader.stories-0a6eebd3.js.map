{"version":3,"file":"MultiCascader.stories-0a6eebd3.js","sources":["../../src/components/multiCascader/MultiCascader.tsx"],"sourcesContent":["import React, { CSSProperties, useEffect, useMemo, useState } from 'react';\r\nimport cs from 'classnames';\r\nimport EmptyTable from '../emptyTable/EmptyTable';\r\nimport './multiCascader.less';\r\n\r\n// 以，|,分割的字符串，获取选中的值\r\nconst splitKeywords = (str: string) => {\r\n  if (!str) return [];\r\n  return str\r\n    .split(/,|，/)\r\n    .map((keyword: string) => keyword.trim())\r\n    .filter(Boolean);\r\n}\r\n\r\n// 获取自身以及祖先节点的value\r\nconst getParentValue = (node: optionType | undefined, nodeMap: Map<valueType, optionType>) => {\r\n  const res: valueType[] = [];\r\n  if (!node) return res;\r\n  const recursion = (n: optionType) => {\r\n    res.push(n.value);\r\n    const parentNode = n.parent && nodeMap.get(n.parent);\r\n    parentNode && recursion(parentNode);\r\n  };\r\n  recursion(node);\r\n  return res;\r\n};\r\n\r\n// 获取子孙节点的value\r\nconst getChildrenValue = (node: optionType) => {\r\n  const res: valueType[] = [];\r\n  const dfs = (n: optionType) => {\r\n    n.children &&\r\n      n.children.forEach(item => {\r\n        res.push(item.value);\r\n        dfs(item);\r\n      });\r\n  };\r\n  dfs(node);\r\n  return res;\r\n};\r\n\r\ntype valueType = string | number;\r\n\r\ninterface optionType {\r\n  label: string;\r\n  value: valueType;\r\n  children?: optionType[];\r\n  disabled?: boolean;\r\n  depth?: number; // 节点深度\r\n  parent?: valueType | null; // 父节点\r\n}\r\n\r\ninterface MultiCascaderProps {\r\n  /**\r\n   * component class name\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Options of component\r\n   */\r\n  options: optionType[];\r\n  /**\r\n   * Selected value\r\n   */\r\n  value?: valueType[];\r\n  /**\r\n   * Callback function called when the value changes\r\n   */\r\n  onChange?: (value: valueType[]) => void;\r\n  /**\r\n   * Is it possible to search\r\n   */\r\n  searchable?: boolean;\r\n  /**\r\n   * Theme color\r\n   */\r\n  themeColor?: string;\r\n  /**\r\n   * disabled status\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Search input placeholder\r\n   */\r\n  searchPlaceholder?: string;\r\n}\r\n\r\nconst MultiCascader: React.FC<MultiCascaderProps> = ({\r\n  className,\r\n  options,\r\n  value,\r\n  onChange,\r\n  searchable = true,\r\n  themeColor = '#1890ff',\r\n  disabled,\r\n  searchPlaceholder,\r\n}) => {\r\n  const [selectedItem, setSelectedItem] = useState<valueType[]>([]);\r\n  const [activeList, setActiveList] = useState<valueType[]>([]);\r\n  const [keyword, setKeyword] = useState<string[]>([]);\r\n  const [searchResult, setSearchResult] = useState<Map<string, optionType[]>>(new Map());\r\n\r\n  const flatOptionsMap = useMemo(() => {\r\n    const map: Map<valueType, optionType> = new Map();\r\n    const dfs = (arr: optionType[], depth: number, parentId: valueType | null) => {\r\n      depth += 1;\r\n      arr.forEach(item => {\r\n        item.depth = depth;\r\n        item.parent = parentId;\r\n        map.set(item.value, item);\r\n        item.children?.length && dfs(item.children, depth, item.value);\r\n      });\r\n    };\r\n    dfs(options, 0, null);\r\n    return map;\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    if (!value) return;\r\n    setSelectedItem(value);\r\n  }, [value])\r\n\r\n  useEffect(() => {\r\n    if (!keyword.length) return;\r\n    const res: typeof searchResult = new Map(keyword.map(key =>([key, []])));\r\n    flatOptionsMap.forEach(item => {\r\n      [...res.keys()].forEach(key => {\r\n        if (item.label.toLowerCase().includes(key.toLowerCase())) {\r\n          res.get(key)?.push(item);\r\n        }\r\n      });\r\n    });\r\n    setSearchResult(res);\r\n  }, [keyword]);\r\n\r\n  const handleChecked = (item: optionType, checked: boolean) => {\r\n    let copySelectedItem = [...selectedItem];\r\n\r\n    // 递归判断祖先节点状态\r\n    const recursiveJudge = (node: optionType) => {\r\n      const parentNode = node.parent && flatOptionsMap.get(node.parent);\r\n      if (parentNode && parentNode.children) {\r\n        const parentChildrenValue = parentNode.children.map(it => it.value);\r\n        const allSelected = parentChildrenValue.every(it => copySelectedItem.includes(it));\r\n        // 子节点都选中时，将父节点加入，清空该父节点的所有子节点\r\n        if (allSelected) {\r\n          copySelectedItem = copySelectedItem.filter(it => !parentChildrenValue.includes(it));\r\n          copySelectedItem.push(parentNode.value);\r\n          recursiveJudge(parentNode);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (checked) {  //  勾选时\r\n      // 加上该节点，清空其所有的子孙节点\r\n      const childrenValue = getChildrenValue(item);\r\n      copySelectedItem = copySelectedItem.filter(it => !childrenValue.includes(it));\r\n      copySelectedItem.push(item.value);\r\n      // 递归判断该节点的祖先节点状态\r\n      recursiveJudge(item);\r\n    } else {  // 取消勾选时\r\n      const idx = copySelectedItem.indexOf(item.value);\r\n      if (idx !== -1) {\r\n        // 有该节点，直接删除\r\n        copySelectedItem.splice(idx, 1);\r\n      } else {\r\n        // 没有该节点，添加该节点的祖先节点的所有子节点, 再删除该节点及其祖先节点，\r\n        const parentNode = getParentValue(item, flatOptionsMap);\r\n        const selectedNodeIdx = parentNode.findIndex(it => copySelectedItem.includes(it));\r\n        if (selectedNodeIdx !== -1) {\r\n          parentNode.slice(1, selectedNodeIdx + 1).forEach(it => {\r\n            flatOptionsMap.get(it)?.children?.forEach(it2 => {\r\n              copySelectedItem.push(it2.value);\r\n            });\r\n          });\r\n          copySelectedItem = copySelectedItem.filter(\r\n            it => !parentNode.slice(0, selectedNodeIdx + 1).includes(it)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    setSelectedItem(copySelectedItem);\r\n    onChange?.(copySelectedItem);\r\n  }\r\n\r\n  const handleDelete = (item: valueType) => {\r\n    const copySelectedItem = [...selectedItem];\r\n    const idx = copySelectedItem.indexOf(item);\r\n    if (idx !== -1) {\r\n      copySelectedItem.splice(idx, 1);\r\n      setSelectedItem(copySelectedItem);\r\n      onChange?.(copySelectedItem);\r\n    }\r\n  }\r\n\r\n  const getMenuItem = (item: optionType) => {\r\n    const parentValue = getParentValue(item, flatOptionsMap);\r\n    const isChecked = selectedItem.some(it => parentValue.includes(it));\r\n    let isIndeterminate = false;\r\n    if (!isChecked) {\r\n      const childrenValue = getChildrenValue(item);\r\n      isIndeterminate = selectedItem.some(it => childrenValue.includes(it));\r\n    }\r\n    return (\r\n      <li \r\n        key={item.value}\r\n        title={item.label}\r\n        className={cs({\r\n          'multi-cascader-menu-item': true,\r\n          'multi-cascader-menu-item-expand': !!item.children?.length,\r\n          'multi-cascader-menu-item-active': activeList.includes(item.value),\r\n          'multi-cascader-menu-item-disabled': disabled || item.disabled,\r\n        })}\r\n        onClick={() => {\r\n          if (disabled) return;\r\n          const copyActiveList = [...activeList];\r\n          item.depth && copyActiveList.splice(item.depth - 1, copyActiveList.length, item.value);\r\n          setActiveList(copyActiveList);\r\n        }}\r\n      >\r\n        <span\r\n          className={cs({\r\n            'multi-cascader-checkbox': true,\r\n            'multi-cascader-checkbox-indeterminate': isIndeterminate,\r\n            'multi-cascader-checkbox-checked': isChecked,\r\n            'multi-cascader-checkbox-disabled': disabled || item.disabled,\r\n          })}\r\n          onClick={() => {\r\n            if (disabled || item.disabled) return;\r\n            handleChecked(item, !isChecked);\r\n          }}\r\n        >\r\n          <span className=\"multi-cascader-checkbox-inner\" />\r\n        </span>\r\n        <div className=\"multi-cascader-menu-item-content\">{item.label}</div>\r\n        <div className=\"multi-cascader-menu-item-expand-icon\">\r\n          <span role=\"icon\">\r\n            <svg\r\n              viewBox=\"64 64 896 896\"\r\n              focusable=\"false\"\r\n              width=\"1em\"\r\n              height=\"1em\"\r\n              fill=\"currentColor\"\r\n            >\r\n              <path d=\"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z\" />\r\n            </svg>\r\n          </span>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={cs('multi-cascader', className)} style={{ '--mca-theme-color': themeColor } as CSSProperties}>\r\n      {searchable && (\r\n        <div className=\"multi-cascader-search-bar\">\r\n          <textarea \r\n            className=\"multi-cascader-search-bar-input\"\r\n            placeholder={searchPlaceholder ?? '支持多项搜索，不同搜索词之间用中英文逗号隔开，按回车键搜索'} \r\n            onKeyDown={(e: any) => {\r\n              const isEnter = e.key === 'Enter' || e.keyCode === 13;\r\n              const val = e.target?.value?.trim();\r\n              isEnter && e.preventDefault(); // 阻止换行\r\n              if (isEnter && val) {\r\n                setKeyword(splitKeywords(val));\r\n              }\r\n            }}\r\n            onChange={e => {if (!e.target?.value?.trim()) setKeyword([])}}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"multi-cascader-body\">\r\n        {keyword.length ? (\r\n          <div className=\"multi-cascader-search-result\">\r\n            <div className=\"multi-cascader-search-result-header\">\r\n              <span>搜索词</span>\r\n              <span>搜索结果</span>\r\n            </div>\r\n            <div className=\"multi-cascader-search-result-items\">\r\n              {[...searchResult.keys()].map(key => (\r\n                <div key={key} className=\"multi-cascader-search-result-item\">\r\n                  <div className=\"multi-cascader-search-result-item-keyword\" title={key}>\r\n                    {key}\r\n                  </div>\r\n                  <div className=\"multi-cascader-search-result-item-contents\">\r\n                    {searchResult.get(key)?.length\r\n                      ? searchResult.get(key)!.map(it => {\r\n                          const htmlContent = getParentValue(it, flatOptionsMap)\r\n                            .map(node => flatOptionsMap.get(node)?.label)\r\n                            .reverse()\r\n                            .join(' / ')\r\n                            .replace(new RegExp(key, 'ig'), '<span>$&</span>');\r\n                          const parentValue = getParentValue(it, flatOptionsMap);\r\n                          const isChecked = selectedItem.some(i => parentValue.includes(i));\r\n                          let isIndeterminate = false;\r\n                          if (!isChecked) {\r\n                            const childrenValue = getChildrenValue(it);\r\n                            isIndeterminate = selectedItem.some(i => childrenValue.includes(i));\r\n                          }\r\n                          return (\r\n                            <div key={it.value} className=\"multi-cascader-search-result-item-content\">\r\n                              <span\r\n                                className={cs({\r\n                                  'multi-cascader-checkbox': true,\r\n                                  'multi-cascader-checkbox-indeterminate': isIndeterminate,\r\n                                  'multi-cascader-checkbox-checked': isChecked,\r\n                                  'multi-cascader-checkbox-disabled': disabled || it.disabled,\r\n                                })}\r\n                                onClick={() => {\r\n                                  if (disabled || it.disabled) return;\r\n                                  handleChecked(it, !isChecked);\r\n                                }}\r\n                              >\r\n                                <span className=\"multi-cascader-checkbox-inner\" />\r\n                              </span>\r\n                              <div\r\n                                dangerouslySetInnerHTML={{ __html: htmlContent }}\r\n                                className=\"multi-cascader-search-result-item-content-text\"\r\n                              />\r\n                            </div>\r\n                          );\r\n                        })\r\n                      : '--'}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"multi-cascader-menus\">\r\n            <ul className=\"multi-cascader-menu\">\r\n              {options.map(item => getMenuItem(item))}\r\n            </ul>\r\n            {activeList.map(item => {\r\n              const temp = flatOptionsMap.get(item);\r\n              if (!temp?.children?.length) return null;\r\n              return (\r\n                <ul key={item} className=\"multi-cascader-menu\">\r\n                  {temp.children.map((it: optionType) => getMenuItem(it))}\r\n                </ul>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n        <div className=\"multi-cascader-result\">\r\n          <div className=\"multi-cascader-result-header\">\r\n            <span>已选 {selectedItem.length} 项</span>\r\n            <span className=\"multi-cascader-result-clear\" onClick={() => {setSelectedItem([]); onChange?.([])}}>清空</span>\r\n          </div>\r\n          <div className=\"multi-cascader-result-body\">\r\n            {selectedItem.length ? selectedItem.map(item => (\r\n              <div key={item} className=\"multi-cascader-result-item\">\r\n                {getParentValue(flatOptionsMap.get(item), flatOptionsMap)\r\n                  .map(it => flatOptionsMap.get(it)?.label)\r\n                  .reverse()\r\n                  .join(' / ')}\r\n                <span className=\"multi-cascader-result-item-close\" onClick={() => handleDelete(item)}>+</span>\r\n              </div>\r\n            )) : (\r\n              <EmptyTable emptyText=\"暂未选择\" style={{ marginTop: 60 }}/>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MultiCascader;"],"names":["splitKeywords","str","keyword","getParentValue","node","nodeMap","res","recursion","n","parentNode","getChildrenValue","dfs","item","MultiCascader","className","options","value","onChange","searchable","themeColor","disabled","searchPlaceholder","selectedItem","setSelectedItem","useState","activeList","setActiveList","setKeyword","searchResult","setSearchResult","flatOptionsMap","useMemo","map","arr","depth","parentId","_a","useEffect","key","handleChecked","checked","copySelectedItem","recursiveJudge","parentChildrenValue","it","childrenValue","idx","selectedNodeIdx","_b","it2","handleDelete","getMenuItem","parentValue","isChecked","isIndeterminate","jsxs","cs","copyActiveList","jsx","isEnter","val","htmlContent","i","temp","EmptyTable"],"mappings":"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"}